Cada vez que hagamos cambios en los modelos que afecten a la estructura de los datos guardados
(a√±adir, borrar modelos o campos), hay que hacer (desde /nombre_proyecto)

python3 manage.py makemigrations
python3 manage.py migrate


By default it will serve the site to your local computer (http://127.0.0.1:8000/), 
but you can also specify other computers on your network to serve to. 
For more information see django-admin and manage.py: runserver (Django docs).

python3 manage.py runserver

superuser:
   usernm: superuser
   mail:   superuser@email.com
   passwd: PSIsu1234



from django.forms import ModelForm

from catalog.models import BookInstance

class RenewBookModelForm(ModelForm):
    def clean_due_back(self):
       data = self.cleaned_data['due_back']

       # Check if a date is not in the past.
       if data < datetime.date.today():
           raise ValidationError(_('Invalid date - renewal in past'))

       # Check if a date is in the allowed range (+4 weeks from today).
       if data > datetime.date.today() + datetime.timedelta(weeks=4):
           raise ValidationError(_('Invalid date - renewal more than 4 weeks ahead'))

       # Remember to always return the cleaned data.
       return data

    class Meta:
        model = BookInstance
        fields = ['due_back']
        labels = {'due_back': _('Renewal date')}
        help_texts = {'due_back': _('Enter a date between now and 4 weeks (default 3).')}

The class RenewBookModelForm above is now functionally equivalent to our original RenewBookForm. You could import and use it wherever you currently use RenewBookForm as long as you also update the corresponding form variable name from renewal_date to due_back as in the second form declaration: RenewBookModelForm(initial={'due_back': proposed_renewal_date}.